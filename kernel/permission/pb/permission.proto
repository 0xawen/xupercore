syntax = "proto3";

package pb;

message Header {
  string logid = 1; //如果logid没填写，生成一个
  string from_node =
      2; // call rpc client address，客户端可以为空，节点一定要写自己的address
}

// 签名详情
message SignatureInfo {
  string PublicKey = 1;
  bytes Sign = 2;
}

// --------   Account and Permission Section --------
enum PermissionRule {
  NULL = 0;           // 无权限控制
  SIGN_THRESHOLD = 1; // 签名阈值策略
  SIGN_AKSET = 2;     // AKSet签名策略
  SIGN_RATE = 3;      // 签名率策略
  SIGN_SUM = 4;       // 签名个数策略vim
  CA_SERVER = 5;      // CA服务器鉴权
  COMMUNITY_VOTE = 6; // 社区治理
}

message PermissionModel {
  PermissionRule rule = 1;
  double acceptValue = 2; // 取决于用哪种rule, 可以表示签名率，签名数或权重阈值
}

// AK集的表示方法
message AkSet {
  repeated string aks = 1; // 一堆公钥
}
message AkSets {
  map<string, AkSet> sets = 1; // 公钥or账户名集
  string expression = 2; // 表达式，一期不支持表达式，默认集合内是and，集合间是or
}

// Acl实际使用的结构
message Acl {
  PermissionModel pm = 1;            // 采用的权限模型
  map<string, double> aksWeight = 2; // 公钥or账户名  -> 权重
  AkSets akSets = 3;
}

// 查询Acl
message AclStatus {
  Header header = 1;
  string bcname = 2;
  string accountName = 3;
  string contractName = 4;
  string methodName = 5;
  bool confirmed = 6;
  Acl acl = 7;
}

// Identity authentication request
message IdentityAuth {
  bytes sign = 1;
  bytes pubkey = 2;
  string addr = 3;
  string peerID = 4;
  string timestamp = 5;
}

// Identity authentication requests
message IdentityAuths { repeated IdentityAuth auth = 1; }

enum ResourceType {
  CPU = 0;
  MEMORY = 1;
  DISK = 2;
  XFEE = 3; // the fee used in kernel contract
}

message ResourceLimit {
  ResourceType type = 1;
  int64 limit = 2;
}

message AK2AccountRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}

message AK2AccountResponse {
  Header header = 1;
  string bcname = 2;
  repeated string account = 3;
}